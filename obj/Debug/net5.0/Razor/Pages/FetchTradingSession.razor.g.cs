#pragma checksum "/Users/archibaldworwui/Projects/TBILLSWebBlazorServerApp/TBILLSWebBlazorServerApp/Pages/FetchTradingSession.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1912d26f5ddf9787c8ad358030eb8b018517fe1b"
// <auto-generated/>
#pragma warning disable 1591
namespace TBILLSWebBlazorServerApp.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "/Users/archibaldworwui/Projects/TBILLSWebBlazorServerApp/TBILLSWebBlazorServerApp/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/archibaldworwui/Projects/TBILLSWebBlazorServerApp/TBILLSWebBlazorServerApp/_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/Users/archibaldworwui/Projects/TBILLSWebBlazorServerApp/TBILLSWebBlazorServerApp/_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/Users/archibaldworwui/Projects/TBILLSWebBlazorServerApp/TBILLSWebBlazorServerApp/_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/Users/archibaldworwui/Projects/TBILLSWebBlazorServerApp/TBILLSWebBlazorServerApp/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/Users/archibaldworwui/Projects/TBILLSWebBlazorServerApp/TBILLSWebBlazorServerApp/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "/Users/archibaldworwui/Projects/TBILLSWebBlazorServerApp/TBILLSWebBlazorServerApp/_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "/Users/archibaldworwui/Projects/TBILLSWebBlazorServerApp/TBILLSWebBlazorServerApp/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "/Users/archibaldworwui/Projects/TBILLSWebBlazorServerApp/TBILLSWebBlazorServerApp/_Imports.razor"
using GridBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "/Users/archibaldworwui/Projects/TBILLSWebBlazorServerApp/TBILLSWebBlazorServerApp/_Imports.razor"
using GridBlazor.Pages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "/Users/archibaldworwui/Projects/TBILLSWebBlazorServerApp/TBILLSWebBlazorServerApp/_Imports.razor"
using GridShared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "/Users/archibaldworwui/Projects/TBILLSWebBlazorServerApp/TBILLSWebBlazorServerApp/_Imports.razor"
using GridShared.Utility;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "/Users/archibaldworwui/Projects/TBILLSWebBlazorServerApp/TBILLSWebBlazorServerApp/_Imports.razor"
using GridCore.Server;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "/Users/archibaldworwui/Projects/TBILLSWebBlazorServerApp/TBILLSWebBlazorServerApp/_Imports.razor"
using TBILLSWebBlazorServerApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "/Users/archibaldworwui/Projects/TBILLSWebBlazorServerApp/TBILLSWebBlazorServerApp/_Imports.razor"
using TBILLSWebBlazorServerApp.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "/Users/archibaldworwui/Projects/TBILLSWebBlazorServerApp/TBILLSWebBlazorServerApp/_Imports.razor"
using TBILLSWebBlazorServerApp.Interfaces;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "/Users/archibaldworwui/Projects/TBILLSWebBlazorServerApp/TBILLSWebBlazorServerApp/_Imports.razor"
using TBILLSWebBlazorServerApp.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "/Users/archibaldworwui/Projects/TBILLSWebBlazorServerApp/TBILLSWebBlazorServerApp/_Imports.razor"
using Blazored.Modal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "/Users/archibaldworwui/Projects/TBILLSWebBlazorServerApp/TBILLSWebBlazorServerApp/_Imports.razor"
using Blazored.Modal.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/Users/archibaldworwui/Projects/TBILLSWebBlazorServerApp/TBILLSWebBlazorServerApp/Pages/FetchTradingSession.razor"
using Microsoft.Extensions.Primitives;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/listTradingSessionGrid")]
    [Microsoft.AspNetCore.Components.RouteAttribute("/listTradingSessionGrid/{SessionNumber}/{Mode}")]
    public partial class FetchTradingSession : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.AddMarkupContent(0, "<h2>\n    Trading Session Details\n</h2>");
#nullable restore
#line 16 "/Users/archibaldworwui/Projects/TBILLSWebBlazorServerApp/TBILLSWebBlazorServerApp/Pages/FetchTradingSession.razor"
 if (_task.IsCompleted)
{

#line default
#line hidden
#nullable disable
            __builder.OpenElement(1, "div");
            __builder.AddAttribute(2, "class", "row");
            __builder.OpenElement(3, "div");
            __builder.AddAttribute(4, "class", "col-md-12");
            __builder.OpenComponent<GridBlazor.Pages.GridComponent<TradingSession>>(5);
            __builder.AddAttribute(6, "Grid", global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<GridBlazor.ICGrid>(
#nullable restore
#line 20 "/Users/archibaldworwui/Projects/TBILLSWebBlazorServerApp/TBILLSWebBlazorServerApp/Pages/FetchTradingSession.razor"
                                                                           _grid

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(7, "Mode", global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<GridShared.GridMode>(
#nullable restore
#line 20 "/Users/archibaldworwui/Projects/TBILLSWebBlazorServerApp/TBILLSWebBlazorServerApp/Pages/FetchTradingSession.razor"
                                                                                        _mode

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(8, "Keys", global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<System.Object[]>(
#nullable restore
#line 20 "/Users/archibaldworwui/Projects/TBILLSWebBlazorServerApp/TBILLSWebBlazorServerApp/Pages/FetchTradingSession.razor"
                                                                                                     _keys

#line default
#line hidden
#nullable disable
            ));
            __builder.AddComponentReferenceCapture(9, (__value) => {
#nullable restore
#line 20 "/Users/archibaldworwui/Projects/TBILLSWebBlazorServerApp/TBILLSWebBlazorServerApp/Pages/FetchTradingSession.razor"
                                                    _gridComponent = (GridBlazor.Pages.GridComponent<TradingSession>)__value;

#line default
#line hidden
#nullable disable
            }
            );
            __builder.CloseComponent();
            __builder.CloseElement();
            __builder.CloseElement();
#nullable restore
#line 23 "/Users/archibaldworwui/Projects/TBILLSWebBlazorServerApp/TBILLSWebBlazorServerApp/Pages/FetchTradingSession.razor"
}
else
{

#line default
#line hidden
#nullable disable
            __builder.AddMarkupContent(10, "<p><em>Loading...</em></p>");
#nullable restore
#line 27 "/Users/archibaldworwui/Projects/TBILLSWebBlazorServerApp/TBILLSWebBlazorServerApp/Pages/FetchTradingSession.razor"
}

#line default
#line hidden
#nullable disable
        }
        #pragma warning restore 1998
#nullable restore
#line 30 "/Users/archibaldworwui/Projects/TBILLSWebBlazorServerApp/TBILLSWebBlazorServerApp/Pages/FetchTradingSession.razor"
     
    private CGrid<TradingSession> _grid;
    private Task _task;
    private GridComponent<TradingSession> _gridComponent;
    private object[] _keys;
    private GridMode _mode;

    [Parameter]
    public string SessionNumber { get; set; }

    [Parameter]
    public string Mode { get; set; }


    protected override async Task OnParametersSetAsync()
    {
        Func<object[], bool, bool, bool, bool, Task<IGrid>> subGrids = async (keys, create, read, update, delete) =>
        {
            var subGridQuery = new QueryDictionary<StringValues>();

            Action<IGridColumnCollection<TradingSessionDetail>> subGridColumns = c => ColumnCollections.TSDetailColumnsCrud(c);

            var subGridClient = new GridClient<TradingSessionDetail>(q => tsdService.GetTradingSessionDetailGridRows(subGridColumns, keys, q),
                subGridQuery, false, "tsdGrid" + keys[0].ToString(), subGridColumns)
                    .Sortable()
                    .Filterable()
                    .SetStriped(true)
                    .Crud(create, read, update, delete, tsdService)
                    .WithMultipleFilters()
                    .WithGridItemsCount()
                    .AddToOnAfterRender(OnAfterTSDetailRender)
                    .SetEditAfterInsert(true);
            await subGridClient.UpdateGrid();
            return subGridClient.Grid;
        };

        Func<object[], bool, bool, bool, bool, Task<IGrid>> Allotmentsubgrids = async (keys, create, read, update, delete) =>
        {
            var subGridQuery = new QueryDictionary<StringValues>();

            Action<IGridColumnCollection<Allotment>> subAllotmentGridColumns = c => ColumnCollections.TSAllotmentColumnsCrud(c, c => caService.GetAllClinetAccounts(), c => securityService.GetAllSecurities(), c => securityInstruction.GetAllInstructions(),
                c => securityService.GetAllSecurities(), c => tsService.GetAllSessionNumbers());

            var subGridClient1 = new GridClient<Allotment>(q => allotmentService.GetCsdClientTypesGridRows(subAllotmentGridColumns, keys,q),
                subGridQuery, false, "allotmentGrid" + keys[0].ToString(), subAllotmentGridColumns)
                    .Sortable()
                    .Filterable()
                    .SetStriped(true)
                    .Crud(create, read, update, delete, allotmentService)
                    .WithMultipleFilters()
                    .WithGridItemsCount()
                    .AddToOnAfterRender(OnAfterTSDetailRender)
                    .SetEditAfterInsert(true);
            await subGridClient1.UpdateGrid();
            return subGridClient1.Grid;
        };

        Func<object[], bool, bool, bool, bool, Task<IGrid>> AuctionPurchaseSubgrids = async (keys, create, read, update, delete) =>
        {
            var subGridQuery = new QueryDictionary<StringValues>();

            Action<IGridColumnCollection<AuctionPurchase>> subAPGridColumns = c => ColumnCollections.TSAuctionPurchaseColumnsCrud(c, c => caService.GetAllClinetAccounts());

            var subGridClient1 = new GridClient<AuctionPurchase>(q => apService.GetAuctionPurchaseGridRows(subAPGridColumns, keys, q),
                subGridQuery, false, "caGrid" + keys[0].ToString(), subAPGridColumns)
                    .Sortable()
                    .Filterable()
                    .SetStriped(true)
                    .Crud(create, read, update, delete,apService)
                    .WithMultipleFilters()
                    .WithGridItemsCount()
                    .AddToOnAfterRender(OnAfterAuctionPurchaseRender)
                    .SetEditAfterInsert(true);
            await subGridClient1.UpdateGrid();
            return subGridClient1.Grid;
        };

        var query = new QueryDictionary<StringValues>();

        Action<IGridColumnCollection<TradingSession>> columns = c => ColumnCollections.TSColumnsWithNestedCrud(c, subGrids, Allotmentsubgrids, AuctionPurchaseSubgrids);

        var client = new GridClient<TradingSession>(q => tsService.GetTradingSessionGridRows(columns, q),
            query, false, "tsGrid", columns)
            .Sortable()
            .Filterable()
            .SetStriped(true)
            .Crud(true, tsService)
            .WithMultipleFilters()
            .WithGridItemsCount()
            .SetEditAfterInsert(true);

        _grid = client.Grid;

        if (!string.IsNullOrWhiteSpace(SessionNumber))
        {
            int sessionNum;
            bool result = int.TryParse(SessionNumber, out sessionNum);
            if (result)
            {
                if (Mode.ToLower() == "create")
                {
                    _keys = new object[] { sessionNum };
                    _mode = GridMode.Create;
                }
                else if (Mode.ToLower() == "read")
                {
                    _keys = new object[] { sessionNum };
                    _mode = GridMode.Read;
                }
                else if (Mode.ToLower() == "update")
                {
                    _keys = new object[] { sessionNum };
                    _mode = GridMode.Update;
                }
                else if (Mode.ToLower() == "delete")
                {
                    _keys = new object[] { sessionNum };
                    _mode = GridMode.Delete;
                }
            }
        }
        _task = client.UpdateGrid();
        await _task;
    }

    private async Task OnAfterTSDetailRender(GridComponent<TradingSessionDetail> gridComponent, bool firstRender)
    {
        if (firstRender)
        {
            gridComponent.BeforeInsert += BeforeInsertTSDetail;
            gridComponent.BeforeUpdate += BeforeUpdateTSDetail;
            gridComponent.BeforeDelete += BeforeDeleteTSDetail;

            gridComponent.AfterInsert += AfterInsertTSDetail;
            gridComponent.AfterUpdate += AfterUpdateTSDetail;
            gridComponent.AfterDelete += AfterDeleteTSDetail;
            gridComponent.AfterBack += AfterBack;

            gridComponent.AfterCreateForm += AfterFormTSDetail;
            gridComponent.AfterReadForm += AfterFormTSDetail;
            gridComponent.AfterUpdateForm += AfterFormTSDetail;
            gridComponent.AfterDeleteForm += AfterFormTSDetail;

            await Task.CompletedTask;
        }
    }

    private async Task<bool> BeforeInsertTSDetail(GridCreateComponent<TradingSessionDetail> component, TradingSessionDetail item)
    {
        var tsDetailValidator = new TSDetailValidator();
        var valid = await tsDetailValidator.ValidateAsync(item);
        if (!valid.IsValid)
        {
            component.Error = "Insert operation returned one or more errors";
            foreach (var error in valid.Errors)
            {
                component.ColumnErrors.AddParameter(error.PropertyName, error.ErrorMessage);
            }
        }
        return valid.IsValid;
    }

    private async Task<bool> BeforeInsert(GridCreateComponent<TradingSession> component, TradingSession item)
    {
        var tsValidator = new TSValidator();
        var valid = await tsValidator.ValidateAsync(item);
        if (!valid.IsValid)
        {
            component.Error = "Insert operation returned one or more errors";
            foreach (var error in valid.Errors)
            {
                component.ColumnErrors.AddParameter(error.PropertyName, error.ErrorMessage);
            }
        }
        return valid.IsValid;
    }

    private async Task<bool> BeforeUpdate(GridUpdateComponent<TradingSession> component, TradingSession item)
    {
        var tsValidator = new TSValidator();
        var valid = await tsValidator.ValidateAsync(item);
        if (!valid.IsValid)
        {
            component.Error = "Update operation returned one or more errors";
            foreach (var error in valid.Errors)
            {
                component.ColumnErrors.AddParameter(error.PropertyName, error.ErrorMessage);
            }
        }
        return valid.IsValid;
    }

    private async Task<bool> BeforeDelete(GridDeleteComponent<TradingSession> component, TradingSession item)
    {
        var tsValidator = new TSValidator();
        var valid = await tsValidator.ValidateAsync(item);
        if (!valid.IsValid)
        {
            component.Error = valid.ToString();
        }
        return valid.IsValid;
    }

    private async Task<bool> BeforeUpdateTSDetail(GridUpdateComponent<TradingSessionDetail> component, TradingSessionDetail item)
    {
        var tsDetailValidator = new TSDetailValidator();
        var valid = await tsDetailValidator.ValidateAsync(item);
        if (!valid.IsValid)
        {
            component.Error = "Update operation returned one or more errors";
            foreach (var error in valid.Errors)
            {
                component.ColumnErrors.AddParameter(error.PropertyName, error.ErrorMessage);
            }
        }
        return valid.IsValid;
    }

    private async Task<bool> BeforeDeleteTSDetail(GridDeleteComponent<TradingSessionDetail> component, TradingSessionDetail item)
    {
        var tsDetailValidator = new TSDetailValidator();
        var valid = await tsDetailValidator.ValidateAsync(item);
        if (!valid.IsValid)
        {
            component.Error = valid.ToString();
        }
        return valid.IsValid;
    }

    private async Task AfterInsertTSDetail(GridCreateComponent<TradingSessionDetail> component, TradingSessionDetail item)
    {
        _gridComponent.ShowCrudButtons();
        await Task.CompletedTask;
    }

    private async Task AfterUpdateTSDetail(GridUpdateComponent<TradingSessionDetail> component, TradingSessionDetail item)
    {
        _gridComponent.ShowCrudButtons();
        await Task.CompletedTask;
    }

    private async Task AfterDeleteTSDetail(GridDeleteComponent<TradingSessionDetail> component, TradingSessionDetail item)
    {
        _gridComponent.ShowCrudButtons();
        await Task.CompletedTask;
    }

    private async Task AfterBack(GridComponent<TradingSessionDetail> component, TradingSessionDetail item)
    {
        _gridComponent.ShowCrudButtons();
        await Task.CompletedTask;
    }

    private async Task AfterFormTSDetail(GridComponent<TradingSessionDetail> gridComponent, TradingSessionDetail item)
    {
        _gridComponent.HideCrudButtons();
        await Task.CompletedTask;
    }

    #region

    private async Task OnAfterTSDetailRender(GridComponent<Allotment> gridComponent, bool firstRender)
    {
        if (firstRender)
        {
            gridComponent.BeforeInsert += BeforeInsertTSDetail;
            gridComponent.BeforeUpdate += BeforeUpdateTSDetail;
            gridComponent.BeforeDelete += BeforeDeleteTSDetail;

            gridComponent.AfterInsert += AfterInsertTSDetail;
            gridComponent.AfterUpdate += AfterUpdateTSDetail;
            gridComponent.AfterDelete += AfterDeleteTSDetail;
            gridComponent.AfterBack += AfterBack;

            gridComponent.AfterCreateForm += AfterFormTSDetail;
            gridComponent.AfterReadForm += AfterFormTSDetail;
            gridComponent.AfterUpdateForm += AfterFormTSDetail;
            gridComponent.AfterDeleteForm += AfterFormTSDetail;

            await Task.CompletedTask;
        }
    }

    private async Task<bool> BeforeInsertTSDetail(GridCreateComponent<Allotment> component, Allotment item)
    {
        var av = new AllotmentValidator();
        var valid = await av.ValidateAsync(item);
        if (!valid.IsValid)
        {
            component.Error = "Insert operation returned one or more errors";
            foreach (var error in valid.Errors)
            {
                component.ColumnErrors.AddParameter(error.PropertyName, error.ErrorMessage);
            }
        }
        return valid.IsValid;
    }

    private async Task<bool> BeforeInsert(GridCreateComponent<Allotment> component, Allotment item)
    {
        var av = new AllotmentValidator();
        var valid = await av.ValidateAsync(item);

        if (!valid.IsValid)
        {
            component.Error = "Insert operation returned one or more errors";
            foreach (var error in valid.Errors)
            {
                component.ColumnErrors.AddParameter(error.PropertyName, error.ErrorMessage);
            }
        }

        return valid.IsValid;
    }

    private async Task<bool> BeforeUpdateTSDetail(GridUpdateComponent<Allotment> component, Allotment item)
    {
        var av = new AllotmentValidator();
        var valid = await av.ValidateAsync(item);

        if (!valid.IsValid)
        {
            component.Error = "Update operation returned one or more errors";
            foreach (var error in valid.Errors)
            {
                component.ColumnErrors.AddParameter(error.PropertyName, error.ErrorMessage);
            }
        }
        return valid.IsValid;
    }

    private async Task<bool> BeforeDeleteTSDetail(GridDeleteComponent<Allotment> component, Allotment item)
    {
        var aValidator = new AllotmentValidator();
        var valid = await aValidator.ValidateAsync(item);

        if (!valid.IsValid)
        {
            component.Error = valid.ToString();
        }
        return valid.IsValid;
    }

    private async Task AfterInsertTSDetail(GridCreateComponent<Allotment> component, Allotment item)
    {
        _gridComponent.ShowCrudButtons();
        await Task.CompletedTask;
    }

    private async Task AfterUpdateTSDetail(GridUpdateComponent<Allotment> component, Allotment item)
    {
        _gridComponent.ShowCrudButtons();
        await Task.CompletedTask;
    }

    private async Task AfterDeleteTSDetail(GridDeleteComponent<Allotment> component, Allotment item)
    {
        _gridComponent.ShowCrudButtons();
        await Task.CompletedTask;
    }

    private async Task AfterBack(GridComponent<Allotment> component, Allotment item)
    {
        _gridComponent.ShowCrudButtons();
        await Task.CompletedTask;
    }

    private async Task AfterFormTSDetail(GridComponent<Allotment> gridComponent, Allotment item)
    {
        _gridComponent.HideCrudButtons();
        await Task.CompletedTask;
    }
    #endregion

    private async Task OnAfterAuctionPurchaseRender(GridComponent<AuctionPurchase> gridComponent, bool firstRender)
    {
        if (firstRender)
        {
            gridComponent.BeforeInsert += BeforeInsertAP;
            gridComponent.BeforeUpdate += BeforeUpdateAP;
            gridComponent.BeforeDelete += BeforeDeleteAP;

            gridComponent.AfterInsert += AfterInsertAP;
            gridComponent.AfterUpdate += AfterUpdateAP;
            gridComponent.AfterDelete += AfterDeleteAP;
            gridComponent.AfterBack += AfterBack;

            gridComponent.AfterCreateForm += AfterFormAP;
            gridComponent.AfterReadForm += AfterFormAP;
            gridComponent.AfterUpdateForm += AfterFormAP;
            gridComponent.AfterDeleteForm += AfterFormAP;
            await Task.CompletedTask;
        }
    }

    private async Task<bool> BeforeInsertAP(GridCreateComponent<AuctionPurchase> component, AuctionPurchase item)
    {
        var ap = new AuctionPurchaseValidator();
        var valid = await ap.ValidateAsync(item);
        if (!valid.IsValid)
        {
            component.Error = "Insert operation returned one or more errors";
            foreach (var error in valid.Errors)
            {
                component.ColumnErrors.AddParameter(error.PropertyName, error.ErrorMessage);
            }
        }
        return valid.IsValid;
    }

    private async Task<bool> BeforeInsert(GridCreateComponent<AuctionPurchase> component, AuctionPurchase item)
    {
        var ap = new AuctionPurchaseValidator();
        var valid = await ap.ValidateAsync(item);
        if (!valid.IsValid)
        {
            component.Error = "Insert operation returned one or more errors";
            foreach (var error in valid.Errors)
            {
                component.ColumnErrors.AddParameter(error.PropertyName, error.ErrorMessage);
            }
        }
        return valid.IsValid;
    }

    private async Task<bool> BeforeUpdateAP(GridUpdateComponent<AuctionPurchase> component, AuctionPurchase item)
    {
        var ap = new AuctionPurchaseValidator();
        var valid = await ap.ValidateAsync(item);
        if (!valid.IsValid)
        {
            component.Error = "Update operation returned one or more errors";
            foreach (var error in valid.Errors)
            {
                component.ColumnErrors.AddParameter(error.PropertyName, error.ErrorMessage);
            }
        }
        return valid.IsValid;
    }

    private async Task<bool> BeforeDeleteAP(GridDeleteComponent<AuctionPurchase> component, AuctionPurchase item)
    {
        var ap = new AuctionPurchaseValidator();
        var valid = await ap.ValidateAsync(item);
        if (!valid.IsValid)
        {
            component.Error = valid.ToString();
        }
        return valid.IsValid;
    }

    private async Task AfterInsertAP(GridCreateComponent<AuctionPurchase> component, AuctionPurchase item)
    {
        _gridComponent.ShowCrudButtons();
        await Task.CompletedTask;
    }

    private async Task AfterUpdateAP(GridUpdateComponent<AuctionPurchase> component, AuctionPurchase item)
    {
        _gridComponent.ShowCrudButtons();
        await Task.CompletedTask;
    }

    private async Task AfterDeleteAP(GridDeleteComponent<AuctionPurchase> component, AuctionPurchase item)
    {
        _gridComponent.ShowCrudButtons();
        await Task.CompletedTask;
    }

    private async Task AfterBack(GridComponent<AuctionPurchase> component, AuctionPurchase item)
    {
        _gridComponent.ShowCrudButtons();
        await Task.CompletedTask;
    }

    private async Task AfterFormAP(GridComponent<AuctionPurchase> gridComponent, AuctionPurchase item)
    {
        _gridComponent.HideCrudButtons();
        await Task.CompletedTask;
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAuctionPurchaseService apService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IClientAccountService caService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IInstructionService securityInstruction { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISecurityService securityService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAllotmentService allotmentService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITradingSessionDetailService tsdService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITradingSessionService tsService { get; set; }
    }
}
#pragma warning restore 1591
